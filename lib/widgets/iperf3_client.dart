import 'dart:convert';
import 'dart:io';

class Iperf3Client {
  static const String serverAddress = '192.168.0.110'; // Replace with your Pi's IP address
  static const int serverPort = 5201; // Default port used by iperf3 server

  // Function to initiate iperf3 test and receive results
  static Future<Map<String, dynamic>> runIperf3Test() async {
    try {
      // Connect to iperf3 server
      Socket socket = await Socket.connect(serverAddress, serverPort);

      // Send command to start iperf3 test
      socket.write('iperf3 -c  $serverAddress');

      // Read output from iperf3 server
      List<int> data = [];
      socket.listen((List<int> event) {
        data.addAll(event);
      });

      await socket.flush(); // Ensure all data is read

      String result = utf8.decode(data); // Convert data to string

      // Parse the output to extract relevant information
      Map<String, dynamic> parsedResult = parseIperf3Output(result);

      // Close the socket
      socket.close();

      return parsedResult;
    } catch (e) {
      print('Error: $e');
      return {'error': e.toString()}; // Return error message
    }
  }

  // Function to parse iperf3 output and extract relevant information
  static Map<String, dynamic> parseIperf3Output(String output) {
    // Implement your logic to parse the output and extract relevant information
    // This will depend on the format of the output generated by iperf3
    // Example: parsing bandwidth measurement
    double bandwidth = 0.0;
    // Implement your logic to extract bandwidth measurement from output
    // For example, you might search for a specific pattern in the output
    // and extract the relevant value.

    return {'bandwidth': bandwidth}; // Return parsed information as a map
  }
}
class IperfVersionChecker {
  static Future<String> getVersion() async {
    try {
      // Execute the iperf command to get its version
      var process = await Process.run('iperf3', ['--version']);

      // Check if the process exited successfully
      if (process.exitCode == 0) {
        // Parse the output to extract the version information
        var version = process.stdout.toString().trim();
        return version;
      } else {
        return 'Error: Unable to get iperf version';
      }
    } catch (e) {
      return 'Error: $e';
    }
  }
}
